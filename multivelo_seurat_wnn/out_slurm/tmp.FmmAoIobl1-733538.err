Attaching SeuratObject
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Centering and scaling data matrix
  |                                                                              |                                                                      |   0%  |                                                                              |===================================                                   |  50%  |                                                                              |======================================================================| 100%
Warning: The default method for RunUMAP has changed from calling Python UMAP via reticulate to the R-native UWOT using the cosine metric
To use Python UMAP via reticulate, set umap.method to 'umap-learn' and metric to 'correlation'
This message will be shown once per session
14:44:09 UMAP embedding parameters a = 0.9922 b = 1.112
14:44:09 Read 65383 rows and found 50 numeric columns
14:44:09 Using Annoy for neighbor search, n_neighbors = 30
14:44:09 Building Annoy index with metric = cosine, n_trees = 50
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
14:44:18 Writing NN index file to temp file /storage/chen/tmp//RtmpVdEujn/file2fe167f08a3e4
14:44:18 Searching Annoy index using 1 thread, search_k = 3000
14:44:41 Annoy recall = 100%
14:45:02 Commencing smooth kNN distance calibration using 1 thread with target n_neighbors = 30
14:45:06 Initializing from normalized Laplacian + noise (using irlba)
14:45:17 Commencing optimization for 200 epochs, with 2939208 positive edges
Using method 'umap'
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
14:46:45 Optimization finished
Performing TF-IDF normalization
Running SVD
Scaling cell embeddings
14:57:00 UMAP embedding parameters a = 0.9922 b = 1.112
14:57:00 Read 65383 rows and found 49 numeric columns
14:57:00 Using Annoy for neighbor search, n_neighbors = 30
14:57:00 Building Annoy index with metric = cosine, n_trees = 50
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
14:57:12 Writing NN index file to temp file /storage/chen/tmp//RtmpVdEujn/file2fe161d15d052
14:57:12 Searching Annoy index using 1 thread, search_k = 3000
14:57:44 Annoy recall = 100%
14:57:46 Commencing smooth kNN distance calibration using 1 thread with target n_neighbors = 30
14:57:51 Initializing from normalized Laplacian + noise (using irlba)
14:57:58 Commencing optimization for 200 epochs, with 2828312 positive edges
Using method 'umap'
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
14:59:21 Optimization finished
Calculating cell-specific modality weights
Finding 50 nearest neighbors for each modality.
Calculating kernel bandwidths
Finding multimodal neighbors
Constructing multimodal KNN graph
Constructing multimodal SNN graph
15:04:45 UMAP embedding parameters a = 0.9922 b = 1.112
15:04:46 Commencing smooth kNN distance calibration using 1 thread with target n_neighbors = 50
15:04:51 Initializing from normalized Laplacian + noise (using irlba)
15:05:03 Commencing optimization for 200 epochs, with 5074924 positive edges
Using method 'umap'
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
15:07:05 Optimization finished
